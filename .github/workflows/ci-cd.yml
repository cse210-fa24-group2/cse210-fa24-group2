name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pylint coverage
          npm install -g jest jsdoc cypress

      - name: Set Environment Variables
        env:
          FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          REDIRECT_URI: ${{ secrets.REDIRECT_URI }}
        run: |
          echo "FLASK_SECRET_KEY=${FLASK_SECRET_KEY}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> $GITHUB_ENV
          echo "REDIRECT_URI=${REDIRECT_URI}" >> $GITHUB_ENV

  linting_and_code_quality:
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint Python Code
        continue-on-error: true
        run: |
          black --check .
          flake8 .
          pylint $(find . -name "*.py")

  testing:
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Python Unit Tests
        continue-on-error: true
        run: coverage run -m unittest discover -s tests

      - name: Jest for JavaScript Unit Testing
        continue-on-error: true
        run: jest --coverage

      - name: Cypress End-to-End Testing
        continue-on-error: true
        run: cypress run

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
        continue-on-error: true

  documentation:
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Generate Documentation
        continue-on-error: true
        run: jsdoc -c jsdoc.json -r .

  deployment:
    runs-on: ubuntu-latest
    needs: [linting_and_code_quality, testing]
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          --data '{"serviceId": "YOUR_RENDER_SERVICE_ID"}' \
          "https://api.render.com/v1/services/YOUR_SERVICE_ID/deploys"
        continue-on-error: true

  optimization:
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - name: Minify CSS and JavaScript
        continue-on-error: true
        run: |
          npm install -g terser clean-css-cli
          find static/css -name "*.css" -exec cleancss -o {} {} \;
          find static/js -name "*.js" -exec terser -o {} -- {} \;

      - name: Upload Optimized Files
        uses: actions/upload-artifact@v3
        with:
          name: optimized-files
          path: static/
        continue-on-error: true
