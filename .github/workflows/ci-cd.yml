name: CI/CD Pipeline for FireStack

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pylint coverage
          npm install -g jest jsdoc cypress eslint

      - name: Set Environment Variables
        env:
          FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          REDIRECT_URI: ${{ secrets.REDIRECT_URI }}
        run: |
          echo "FLASK_SECRET_KEY=${FLASK_SECRET_KEY}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> $GITHUB_ENV
          echo "REDIRECT_URI=${REDIRECT_URI}" >> $GITHUB_ENV

      - name: Verify Installed Packages and PATH
        run: |
          pip list

  jsdocs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Generate JSDocs
        run: npx jsdoc -c jsdoc.json -d jsdocs/

      - name: Push JSDocs to Docs Branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Fetch the latest state of the remote repository
          git fetch origin

          # Switch to or create the docs branch
          git checkout -B docs

          # Use a temporary directory to ensure safe copying
          mkdir -p jsdocs_temp
          cp -R jsdocs/* jsdocs_temp/
          rm -rf jsdocs
          mv jsdocs_temp jsdocs

          # Stage and commit the updated documentation
          git add jsdocs/
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update JSDocs [skip ci]"

            # Push the changes to the remote docs branch
            git push --force --set-upstream origin docs

          fi

  linting_and_code_quality:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint Python Code
        run: |
          python -m black --check .
          python -m flake8 .
          python -m pylint $(find . -name "*.py")

      - name: Lint JavaScript Code
        run: |
          eslint . .js,.jsx,.ts,.tsx

      - name: Codacy Analysis
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          curl -Ls https://coverage.codacy.com/get.sh | bash
          codacy-analysis-cli analyze --tool pylint
          codacy-analysis-cli analyze --tool eslint

  static_analysis:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install ESLint Locally
        run: |
          npm install eslint eslint-plugin-security eslint-plugin-jsdoc

      - name: Perform Static Analysis
        run: |
          npx eslint "**/*.{js,jsx,ts,tsx}" \
            --plugin security \
            --plugin jsdoc

      - name: Upload Static Analysis Report
        uses: actions/upload-artifact@v3
        with:
          name: static-analysis-report
          path: ./eslint-report/

  testing:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3


      - name: Run Python Unit Tests
        run: python -m coverage run -m unittest discover -s tests


      - name: Jest for JavaScript Unit Testing
        run: jest --coverage


      - name: Cypress End-to-End Testing
        run: cypress run


      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/


      - name: Upload Coverage to Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml


  deployment:
    runs-on: ubuntu-latest
    needs: [linting_and_code_quality, testing]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3


      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          --data '{"serviceId": "YOUR_RENDER_SERVICE_ID"}' \
          "https://api.render.com/v1/services/YOUR_SERVICE_ID/deploys"


  optimization:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Print Working Directory
        run: pwd

      - name: Print Directory Contents
        run: ls -a

      - name: Print static Directory Contents
        run: ls static/

      - name: Debug Environment Variables
        run: printenv

      - name: Minify CSS and JavaScript
        run: |
          npm install -g terser clean-css-cli
          find static/css -name "*.css" -exec cleancss -o {} {} \;
          find static/js -name "*.js" -exec terser -o {} -- {} \;


      - name: Upload Optimized Files
        uses: actions/upload-artifact@v3
        with:
          name: optimized-files
          path: static/

