name: CI/CD Pipeline for FireStack

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 pylint coverage
          npm install -g jest jsdoc cypress eslint terser clean-css-cli

  jsdocs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Generate JSDocs
        run: npx jsdoc -c jsdoc.json -d jsdocs/

      - name: Push JSDocs to Docs Branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin
          git checkout -B docs
          cp -R jsdocs/* .
          git add jsdocs/
          git commit -m "Update JSDocs [skip ci]" || echo "No changes to commit"
          git push --force --set-upstream origin docs

  linting_and_code_quality:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint Python Code
        run: |
          python -m black --check .
          python -m flake8 .
          python -m pylint $(find . -name "*.py")

      - name: Lint JavaScript Code
        run: eslint "static/js/**/*.{js,jsx,ts,tsx}"

  static_analysis:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Perform Static Analysis
        run: npx eslint "static/js/**/*.{js,jsx,ts,tsx}" --plugin security --plugin jsdoc

      - name: Upload Static Analysis Report
        uses: actions/upload-artifact@v3
        with:
          name: static-analysis-report
          path: ./eslint-report/

  testing:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Python Unit Tests
        run: python -m coverage run -m unittest discover -s tests

      - name: Jest for JavaScript Unit Testing
        run: jest --coverage

      - name: Cypress End-to-End Testing
        run: cypress run

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  deployment:
    runs-on: ubuntu-latest
    needs: [linting_and_code_quality, testing]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          --data '{"serviceId": "YOUR_RENDER_SERVICE_ID"}' \
          "https://api.render.com/v1/services/YOUR_SERVICE_ID/deploys"

  optimization:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Minify CSS
        run: |
          find static/css -name "*.css" -exec cleancss -o {} {} \;

      - name: Minify JavaScript
        run: |
          find static/js -name "*.js" -exec terser --compress --mangle -o {} -- {} \;

      - name: Upload Optimized Files
        uses: actions/upload-artifact@v3
        with:
          name: optimized-files
          path: static/
